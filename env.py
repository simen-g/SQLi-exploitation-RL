import generate_actions as actions
import requests
import numpy as np
import urllib.parse
import re
import random
import sys

class SQLi_Environment():

    def __init__(self,verbose=True, flag_reward = 10, query_reward = -1):
        # Get the action space
		#self.A = np.array(const.actions)
        self.query_reward = query_reward
        self.flag_reward = flag_reward
        self.termination = False
        self.verbose = verbose

    def step(self, action, url = "http://127.0.0.1:5000"):
        status = self.test_HTTP_connection(url)
        if status == -1:
            return

        response = self.post_payload(action, url)
        result = self.analyze_response(response)

        if result == -1: ##somehow got output from query but no flag (should not happen)
            return -1, self.query_reward, self.termination,'Server result is -1'
        elif result == 0: #reset
            return 0, self.query_reward, self.termination,'Server result is 0'
        elif result == 1: #server error
            return 1, self.query_reward,self.termination,'Server result is 1'
        elif result == 2: #response '[]'
            return 2, self.query_reward,self.termination,'Server result is 2'
        elif result == 3: #found flag
            self.termination = True
            return 3, self.flag_reward,self.termination,'Server result is 3'
        else:
            print("ERROR")
            return

    def test_HTTP_connection(self, url):
        #confirm that the environment is running
        response = requests.get(url)
        if response.status_code != 200:
            if self.verbose:
                print(f"Environment is not running. Error status {response.status_code}")
            sys.exit()
        else:
            if(self.verbose):
                print(f"Environment is up and running")

    ##Using hardcoded forms - could be made more flexible
    def post_payload(self, action, url):
        #sql_query = "' OR '1'='1'--"
        if self.verbose:
            print(f"SQL Query is: {action}")
        #perform injection
        forms = {
            'p1': 'test',
            'p2': action
        }
        response = requests.post(url, data = forms)
        return response

    def analyze_response(self, response):
        if response.status_code == 500:
            if self.verbose:
                print("Correct escape for query(?)") ##Can possibly crash for other reasons as well
            return 1
        if response.status_code == 418:
            if self.verbose:
                print("Illegal character") ##Can possibly crash for other reasons as well
            return 1
        response = response.text
        response = response[response.find("[")+1:response.find("]")] #filter out everything outside brackets
        response = response.split(",")
        if len(response) == 1: #no results from the query
            if self.verbose:
                print("Successfull query, but no exploitation")
            return 2
        for word in response:
            word = re.sub("[^a-zA-Z]+", "", word) #remove all unnecessary chars from strings
            if self.verbose:
                print(f"Word = {word}")
            if word.lower() == "flag":
                print("FOUND FLAG")
                return 3
        if self.verbose:
            print("This should never be printed out") ##at least with the current setup
        return -1

    def reset(self):
    	self.termination = False
    	return None,0,self.termination,'Game reset'
